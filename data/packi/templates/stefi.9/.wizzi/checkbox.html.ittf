layouts/muiPage()

  $append imports
    const green = colors.green
  
  $append styles
    { root
        @ color green[600]
        { '&$checked'
            @ color green[500]
    @ checked {}
  
  $append state
    @ checkedA true
    @ checkedB true
    @ checkedF true
    @ checkedG true
    @ gilad true
    @ jason false
    @ antoine false

  => handleChange
      param name
      return
        => 
            param event
            _ this.setState
                { 
                    @ [name] event.target.checked
  render
    prop classes
    const 
        { 
            @ gilad
            @ jason
            @ antoine
        = this.state
    const error
        !== 
            [ 
                @ gilad
                @ jason
                @ antoine
                ._ filter
                    => 
                        param v
                        + v
                . length
            + 2

    return 
        div 
            < Checkbox 
                @ checked {this.state.checkedA}
                @ onChange {this.handleChange('checkedA')}
                @ value "checkedA"
            < Checkbox 
                @ checked {this.state.checkedB}
                @ onChange {this.handleChange('checkedB')}
                @ value "checkedB"
                @ color "primary"
            < Checkbox 
                @ value "checkedC"
            < Checkbox 
                @ disabled
                @ value "checkedD"
            < Checkbox 
                @ disabled
                @ checked
                @ value "checkedE"
            < Checkbox 
                @ checked {this.state.checkedF}
                @ onChange {this.handleChange('checkedF')}
                @ value "checkedF"
                @ indeterminate
            < Checkbox 
                @ defaultChecked
                @ color "default"
                @ value "checkedG"

            < FormGroup 
                @ row
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ checked {this.state.checkedA}
                            @ onChange {this.handleChange('checkedA')}
                            @ value "checkedA"
                    @ label "Secondary"
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ checked {this.state.checkedB}
                            @ onChange {this.handleChange('checkedB')}
                            @ value "checkedB"
                            @ color "primary"
                    @ label "Primary"
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ value "checkedC"
                    @ label "Uncontrolled"
                < FormControlLabel 
                    @ disabled
                    @ control
                        < Checkbox 
                            @ value "checkedD"
                    @ label "Disabled"
                < FormControlLabel 
                    @ disabled
                    @ control
                        < Checkbox 
                            @ checked
                            @ value "checkedE"
                    @ label "Disabled"
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ checked {this.state.checkedF}
                            @ onChange {this.handleChange('checkedF')}
                            @ value "checkedF"
                            @ indeterminate
                    @ label "Indeterminate"
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ checked {this.state.checkedG}
                            @ onChange {this.handleChange('checkedG')}
                            @ value "checkedG"
                            @ classes
                                { 
                                    @ root classes.root
                                    @ checked classes.checked
                    @ label "Custom color"
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ icon
                                < Icon
                                  + favorite_border 
                            @ checkedIcon
                                < Icon
                                  + favorite 
                            @ value "checkedH"
                    @ label "Custom icon"
                < FormControlLabel 
                    @ control
                        < Checkbox 
                            @ icon
                                < Icon 
                                    @ fontSize "small"
                                    + check_box_outlined_blank
                            @ checkedIcon
                                < Icon 
                                    @ fontSize "small"
                                    + checked
                            @ value "checked"
                    @ label "Custom size"
                
                div 
                    @ className {classes.root}
                    < FormControl 
                        @ component "fieldset"
                        @ className {classes.formControl}
                        < FormLabel 
                            @ component "legend"
                            + Assign responsibility
                        < FormGroup 
                            < FormControlLabel 
                                @ control
                                    < Checkbox 
                                        @ checked {gilad}
                                        @ onChange {this.handleChange('gilad')}
                                        @ value "gilad"
                                @ label "Gilad Gray"
                            < FormControlLabel 
                                @ control
                                    < Checkbox 
                                        @ checked {jason}
                                        @ onChange {this.handleChange('jason')}
                                        @ value "jason"
                                @ label "Jason Killian"
                            < FormControlLabel 
                                @ control
                                    < Checkbox 
                                        @ checked {antoine}
                                        @ onChange {this.handleChange('antoine')}
                                        @ value "antoine"
                                @ label "Antoine Llorca"
                        < FormHelperText 
                            + Be careful



