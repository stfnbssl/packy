layouts/muiPage()

  $append imports

  $append components
    function arrowGenerator
        param color
        return 
            { 
                { '&[x-placement*="bottom"] $arrow'
                    @ top 0
                    @ left 0
                    @ marginTop '-0.95em'
                    @ width '3em'
                    @ height '1em'
                    { '&::before'
                        @ borderWidth '0 1em 1em 1em'
                        @ borderColor
                            `lit 
                                + transparent transparent\b
                                @ color
                                + \btransparent
                { '&[x-placement*="top"] $arrow'
                    @ bottom 0
                    @ left 0
                    @ marginBottom '-0.95em'
                    @ width '3em'
                    @ height '1em'
                    { '&::before'
                        @ borderWidth '1em 1em 0 1em'
                        @ borderColor
                            `lit 
                                + 
                                @ color
                                + \btransparent transparent transparent
                { '&[x-placement*="right"] $arrow'
                    @ left 0
                    @ marginLeft '-0.95em'
                    @ height '3em'
                    @ width '1em'
                    { '&::before'
                        @ borderWidth '1em 1em 1em 0'
                        @ borderColor
                            `lit 
                                + transparent\b
                                @ color
                                + \btransparent transparent
                { '&[x-placement*="left"] $arrow'
                    @ right 0
                    @ marginRight '-0.95em'
                    @ height '3em'
                    @ width '1em'
                    { '&::before'
                        @ borderWidth '1em 0 1em 1em'
                        @ borderColor
                            `lit 
                                + transparent transparent transparent\b
                                @ color
                                + 


  $append styles
    { button
        @ margin theme.spacing.unit
    { lightTooltip
        @ backgroundColor theme.palette.common.white
        @ color 'rgba(0, 0, 0, 0.87)'
        @ boxShadow theme.shadows[1]
        @ fontSize 11
    @ arrowPopper arrowGenerator(theme.palette.grey[700])
    { arrow
        @ position 'absolute'
        @ fontSize 6
        @ width '3em'
        @ height '3em'
        { '&::before'
            @ content '""'
            @ margin 'auto'
            @ display 'block'
            @ width 0
            @ height 0
            @ borderStyle 'solid'
    @ bootstrapPopper arrowGenerator(theme.palette.common.black)
    { bootstrapTooltip
        @ backgroundColor theme.palette.common.black
    { bootstrapPlacementLeft
        @ margin '0 8px'
    { bootstrapPlacementRight
        @ margin '0 8px'
    { bootstrapPlacementTop
        @ margin '8px 0'
    { bootstrapPlacementBottom
        @ margin '8px 0'
    @ htmlPopper arrowGenerator('#dadde9')
    { htmlTooltip
        @ backgroundColor '#f5f5f9'
        @ color 'rgba(0, 0, 0, 0.87)'
        @ maxWidth 220
        @ fontSize theme.typography.pxToRem(12)
        @ border '1px solid #dadde9'
        { '& b'
            @ fontWeight theme.typography.fontWeightMedium

  $append state
    @ arrowRef null

  => handleArrowRef
      param node
      _ this.setState
          { 
              @ arrowRef node
  render
    prop classes
    return 
        div 
            < Tooltip 
                @ title "Add"
                @ classes
                    { 
                        @ tooltip classes.lightTooltip
                < Button 
                    @ className {classes.button}
                    + Light
            < Tooltip 
                @ title
                    < React.Fragment 
                        + Add
                        span 
                            @ className {classes.arrow}
                            @ ref {this.handleArrowRef}
                @ classes
                    { 
                        @ popper classes.arrowPopper
                @ PopperProps
                    { 
                        { popperOptions
                            { modifiers
                                { arrow
                                    @ enabled Boolean(this.state.arrowRef)
                                    @ element this.state.arrowRef
                < Button 
                    @ className {classes.button}
                    + Arrow
            < Tooltip 
                @ title
                    < React.Fragment 
                        + Add
                        span 
                            @ className {classes.arrow}
                            @ ref {this.handleArrowRef}
                @ classes
                    { 
                        @ tooltip classes.bootstrapTooltip
                        @ popper classes.bootstrapPopper
                        @ tooltipPlacementLeft classes.bootstrapPlacementLeft
                        @ tooltipPlacementRight classes.bootstrapPlacementRight
                        @ tooltipPlacementTop classes.bootstrapPlacementTop
                        @ tooltipPlacementBottom classes.bootstrapPlacementBottom
                @ PopperProps
                    { 
                        { popperOptions
                            { modifiers
                                { arrow
                                    @ enabled Boolean(this.state.arrowRef)
                                    @ element this.state.arrowRef
                < Button 
                    @ className {classes.button}
                    + Bootstrap
            < Tooltip 
                @ classes
                    { 
                        @ popper classes.htmlPopper
                        @ tooltip classes.htmlTooltip
                @ PopperProps
                    { 
                        { popperOptions
                            { modifiers
                                { arrow
                                    @ enabled Boolean(this.state.arrowRef)
                                    @ element this.state.arrowRef
                @ title
                    < React.Fragment 
                        < Typography 
                            @ color "inherit"
                            + Tooltip with HTML
                        em 
                            + {"And here's"}
                        b 
                            + {'some'}
                        u 
                            + {'amazing content'}
                        + .
                        + {' '}
                        + {"It's very engaging. Right?"}
                        span 
                            @ className {classes.arrow}
                            @ ref {this.handleArrowRef}
                < Button 
                    @ className {classes.button}
                    + HTML
